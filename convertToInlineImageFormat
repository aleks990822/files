 static func convertToInlineImageFormat(htmlStrr:String, View: UIView) -> NSMutableAttributedString {
        
        let htmlStringgg = htmlStrr as String
        let content = try! NSMutableAttributedString(
            data: htmlStringgg.data(using: String.Encoding.unicode, allowLossyConversion: true)!,
            options: [ .documentType: NSAttributedString.DocumentType.html],
            documentAttributes: nil)
     
        
        let fontDesc =  UIFont(name:"roboto-light", size: 19)
        
        content.addAttribute(NSAttributedStringKey.font, value: fontDesc!, range: NSRange(location: 0, length: content.length))
        
        content.enumerateAttribute(NSAttributedStringKey.attachment, in: NSRange(location: 0, length: content.length), options: [], using: {(value,range,stop) -> Void in
            if (value is NSTextAttachment) {
                let attachment: NSTextAttachment? = (value as? NSTextAttachment)
                
//                let image = value as? NSTextAttachment
//                print(image?.bounds.size.height)
//                print(image?.bounds.size.width)

               

                if ((attachment?.image) != nil) {
                    
                    attachment?.bounds.origin = CGPoint(x: View.frame.size.width - 20, y: 20)
                    attachment?.bounds.size = CGSize(width: View.frame.size.width - 25, height: View.frame.size.width - 70)

                } else {
               
                    attachment?.bounds.origin = CGPoint(x: View.frame.size.width - 20, y: 20)
                    attachment?.bounds.size = CGSize(width: View.frame.size.width - 25, height: View.frame.size.width - 70)
                    
                }
                
                
            }
        })
        
        return content
    }
    
    
}
